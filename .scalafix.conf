rules = [
  Disable,
  DisableSyntax,
  ExplicitResultTypes,
  LeakingImplicitClassVal,
  NoValInForComprehension,
  ProcedureSyntax
]
Disable {
  symbols = [
    {
      id = "ScalaCollection",
      regex.includes = [
        "scala.collection.immutable.Stream",
        "scala.collection.mutable.*",
        "scala.collection.parallel.*"
      ],
      message = "Do not use, mutable structure, worse performance, dead-locks"
    },
    {
      id = "ScalaPartial",
      regex.includes = [
        "^\\Qscala/Option#get().\\E$",
        "^\\Qscala/Some#get().\\E$",
        "^\\Qscala/None#get().\\E$",
        "^\\Qscala/util/Try#get().\\E$",
        "^\\Qscala/util/Failure#get().\\E$",
        "^\\Qscala/util/Success#get().\\E$",
        "^\\Qscala/util/Either.LeftProjection#get().\\E$",
        "^\\Qscala/util/Either.RightProjection#get().\\E$"
      ],
      message = "Use .fold or .getOrElse instead, not a total function"
    },
    {
      id = "ScalaPartial",
      regex.includes = [
        "^scala\\/collection\\/((immutable\\/)*?).+#head\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#tail\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#init\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#last\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#reduce\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#reduceLeft\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#reduceRight\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#min\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#minBy\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#max\\(\\)\\.$",
        "^scala\\/collection\\/((immutable\\/)*?).+#maxBy\\(\\)\\.$",
      ],
      message = "Use .headOption, .lastOption, .foldLeft or similar instead, not a total function"
    }
  ]
  ifSynthetic = [
    {
      id = "Any2String",
      symbol = "scala.Predef.any2stringadd",
      message = "Use explicit .toString instead"
    },
    {
      id = "Option2Iterable",
      symbol = "scala.Option.option2Iterable",
      message = "Use .fold instead, this can hide bugs and creates surprising situations like Some(1) zip Some(2) returning an Iterable[(Int, Int)]."
    },
    {
      id = "Serializable",
      symbol = "java.io.Serializable",
      message = "Illegal inferred type"
    },
    {
      id = "Any",
      symbol = "scala.Any",
      message = "Illegal inferred type"
    },
    {
      id = "Product",
      symbol = "scala.Product",
      message = "Illegal inferred type"
    },
    {
      id = "ScalaPartial",
      regex.includes = [
        "scala.collection.MapLike.apply",
        "scala.collection.SeqLike.apply",
        "scala.collection.LinearSeqOptimized.apply",
        "scala.collection.immutable.Vector.apply",
      ],
      message = "Do not use, not a total function"
    }
  ]
}
DisableSyntax {
  noVars = true
  noThrows = true
  noNulls = true
  noFinalize = true
  noReturns = true
  noWhileLoops = true
  noAsInstanceOf = true
  noIsInstanceOf = true
  noXml = true
  noValPatterns = true
  noDefaultArgs = false
  regex = []
}
ExplicitResultTypes {
  memberKind = [Def, Val, Var]
  memberVisibility = [Public]
  skipSimpleDefinitions = ['Term.Ref', 'Lit', 'Term.New']
  skipLocalImplicits = true
  fatalWarnings = false
  rewriteStructuralTypesToNamedSubclass = true
}
